import bpy
import bpy_extras
import mathutils
import math
import rand

# Función para obtener las coordenadas 
def get_bbox_2d_coordinates(obj, cam, scene):
    # Obtener los vértices del objeto en espacio mundial
    bbox = [obj.matrix_world @ mathutils.Vector(corner) for corner in obj.bound_box]
    
    # Convertir cada vértice a coordenadas de la cámara (coordenadas 2D normalizadas)
    coords_2d = [bpy_extras.object_utils.world_to_camera_view(scene, cam, coord) for coord in bbox]
    
    # Encontrar el mínimo y máximo en x y y 
    min_x = min(coord.x for coord in coords_2d)
    max_x = max(coord.x for coord in coords_2d)
    min_y = min(coord.y for coord in coords_2d)
    max_y = max(coord.y for coord in coords_2d)
    
    # Calcular el centro y las dimensiones 
    x_center = (min_x + max_x) / 2
    y_center = (min_y + max_y) / 2
    width = max_x - min_x
    height = max_y - min_y
    
    return x_center, y_center, width, height

# Función para generar el archivo de etiquetas YOLO
def generar_etiquetas_yolo(nombre_archivo, objetos, cam, scene, img_width, img_height):
    with open(nombre_archivo, 'w') as file:
        for obj_data in objetos:
            obj_name, class_id = obj_data  # Nombre del objeto y clase
            obj = bpy.data.objects.get(obj_name)
            
            if obj is not None:
                # Obtener las coordenadas de la caja delimitadora en 2D
                x_center, y_center, width, height = get_bbox_2d_coordinates(obj, cam, scene)
                
                
                # Escribir en el archivo de etiquetas en formato YOLO
                file.write(f"{class_id} {x_center} {y_center} {width} {height}\n")

### 

#Render

###
# Configurar la cámara para que siempre apunte al objeto
def apuntar_camara_a_objeto(camara, objeto):
    direccion = (objeto.location - camara.location) * -1
    rot_quat = direccion.to_track_quat('Z', 'Y')
    camara.rotation_euler = rot_quat.to_euler()

# Guardar una imagen desde la vista de la cámara
def renderizar_imagen(nombre_archivo):
    bpy.context.scene.camera = camara
    bpy.context.scene.render.filepath = carpeta_salida + nombre_archivo
    bpy.ops.render.render(write_still=True)


# Nombre del objeto y de la cámara en la escena
nombre_objeto = "8mm_FIXbearing_G.001"  # Cambia el nombre del objeto si es necesario
nombre_camara = "Camera"

# Número de imágenes a capturar
num_imagenes = 300

# Radio de la órbita de la cámara alrededor del objeto
radio = 50

# Altura desde la cual se tomarán las imágenes
altura_camara = 25

# Carpeta de destino para guardar las imágenes
carpeta_salida = "G:\\My Drive\\3er Semestre\\YOLO\\Data_set\\images"

# Obtén la cámara y el objeto en la escena
objeto = bpy.data.objects[nombre_objeto]
camara = bpy.data.objects[nombre_camara]

# Posición inicial de la cámara
camara.location = (0, -radio, altura_camara)

# Configuraciones de archivos
objetos_para_etiquetar = [("8mm_FIXbearing_G.001", 0)]  # Lista de objetos y sus IDs de clase


#Ejectuable

for i in range(num_imagenes):
    # Calcular la nueva posición de la cámara
    angulo = (2 * math.pi / num_imagenes) * i
    camara.location.x = radio * math.cos(angulo)
    camara.location.y = radio * math.sin(angulo)
    camara.location.z = altura_camara

    # Apuntar la cámara hacia el objeto
    apuntar_camara_a_objeto(camara, objeto)
    
    
    
# Renderizar y guardar la imagen
    nombre_archivo = f"imagen_{i:03d}.png"
    nombre_archivo_label = f"imagen_{i:03d}.txt"
    
    renderizar_imagen(nombre_archivo)
    nombre_archivo_etiquetas = (carpeta_salida + nombre_archivo_label)
    
    cam = bpy.context.scene.camera  # Cámara activa
    scene = bpy.context.scene  # Escena actual
    img_width = bpy.context.scene.render.resolution_x  # Ancho de la imagen renderizada
    img_height = bpy.context.scene.render.resolution_y  # Alto de la imagen renderizada

    # Generar el archivo de etiquetas YOLO
    generar_etiquetas_yolo(nombre_archivo_etiquetas, objetos_para_etiquetar, cam, scene, img_width, img_height)
    #print(f"Archivo de etiquetas YOLO generado en: {nombre_archivo_etiquetas}")
    






